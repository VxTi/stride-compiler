import "external library";

define test() {
    fn_call();
}

define test() {
 // do nothing
}

module Module {
    class Test<T> {
        define async public fn(file: io::file, socket: io::socket, timeout_ms: i32) {
            b::listen();;;;

        }
    }
}

public class First<K, L> {
    const p: K;
    const l: L;
}

test();;;

let test: unknown = 5 + symbol + fn::call(3, 5) + (3 + 5) ? 4 : 0;

let g: unknown = fn::call(test, 0) + 2;

                            // subset in function call
let k: type::something = test(null, 2, mod::test());;

let g: char = c;;

module Test {
    class TestClass {
        // Something
    }
}

struct genericsTest<T, G, B> {
    val: T;
    const ref: Test::TestClass;
}

struct Vector<T> {
    x: T;
    y: T;
    z: T;
}

class Third has Second and Test {
    const p: unknown = super;
}

// Inherits p and l fields
class Second<G, B> has First<i8, i32> and Test<P> {

    const p2: unknown;

}


module test::modulename {

    define external test();

    define for_test(i: none) {
        for (let i: i8 = 0; i < 10; i++) {}
        for (let i: i8 = 0; i < 10; i++) {

        }

        throw Error("oops");
    }

    define main(args: string[]) {
        system::println("Hello, World!");
    }

    define external println(message: string, args: ...string);

    define func(test: string, test2: ...string) {

        let k: i8 = 0;

        do {
            // Nothing.
        } while (k++ < 10);

        do {
            system::println("Hello, World!");
        } while (++x < 10);

        try {
            system::println("Hello, World!");
        } catch (e: Error) {
            system::println("Hello, World!");;

            throw Error("fuck");
        }

        if (kek) {
            try {
                let content: string = io::read_file("/file/path");
                let socket: socket = io::socket::create();
            }
            catch (err: Error) {
                system::println("Something went wrong");
            }
        }

        let k: i8 = 0;

        do {
            socket::listen();
        } while (true);

     }
}

let c: char = 'c',
    d: char = '\'';
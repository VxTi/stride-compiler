import "external library";

let k: type::something[] = function::call(null, 2, function::call());

public class Test {}

public class Test<T> {
    define async public fn(file: io::file, socket: io::socket, timeout_ms: i32) {
        b::listen();
    };
}

module Test {
    class TestClass {
        // Something
    }
}

struct genericsTest<T, G, B> {
    val: T;
    ref: Test::TestClass;
}

struct Vector<T> {
    x: T;
    y: T;
    z: T;
}

class First<K, L> {
    const p: K;
    const l: L;
}

// Inherits p and l fields
class Second<G, B> : First<i8, i32>, Test<P> {

    const p2: unknown;

}

class Third : Second {
    let p2: unknown = p + p2;
}


module test::modulename {

    define external test();

    define for_test(i: none) {
        for (let i: i8 = 0; i < 10; i++) {}
        for (let i: i8 = 0; i < 10; i++) {

        }

        throw Error("oops");
    }

    define main(args: string[]) {
        system::println("Hello, World!");
    }

    define external println(message: string, args: ...string);

    define func(test: string, test2: ...string) {

        let k: i8 = 0;

        do {
            // Nothing.
        } while (k++ < 10);

        do {
            system::println("Hello, World!");
        } while (++x < 10);

        try {
            system::println("Hello, World!");
        } catch (e: Error) {
            system::println("Hello, World!");
            throw Error("fuck");
        }

        if (kek) {
            try {
                let content: string = io::read_file("/file/path");
                let socket: socket = io::socket::create();
            }
            catch (err: Error) {
                system::println("Something went wrong");
            }
        }

        let k: i8 = 0;

        do {
            socket::listen();
        } while (true);

     }
}